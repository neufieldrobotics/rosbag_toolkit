#!/usr/bin/env python3
# -*- coding: utf-8 -*-
'''
MIT License

Copyright (c) 2018 neufieldrobotics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

@author: Vikrant Shah
A simple script that can converts rosmessages to matlab mat files
Define the translation of each message type in a dictionary file and use a 
config file to specify all the topics to be converted.
'''
from __future__ import print_function

import roslib
import rospy
import rostopic
import rospkg
import rosbag

import argparse
import importlib
import sys
import numpy as np
import time
from scipy.io import savemat
import os
import yaml
import logging
import copy
import utm

bglog = logging.getLogger("bag2matpy")
logging.basicConfig(level=logging.INFO, format='%(levelname)8s  %(message)s')


def save_topic2dict(topic_name, msg_dict, bagfile, start_time,subtract_start_time, msg_type, convert_to_utm):
    bglog = logging.getLogger(__name__)
    expression = ",".join(msg_dict.values())
    field_names = list(msg_dict.keys())
    print(field_names)
    # append additional variables
    if subtract_start_time:
        field_names += ['offset_time']
    if convert_to_utm and msg_type =='sensor_msgs/NavSatFix':
        field_names += ['easting', 'northing', 'zone', 'letter_int']

    data_array = []
    for topic, msg, ts in bagfile.read_messages(topics=[topic_name]):
        res = eval("{}".format(expression),{'np':np}, {'m': msg, 't':ts})

        if subtract_start_time:
            offset_time = (ts.to_sec() - start_time,) # store_as_tuple 
            res += offset_time
        # do utm conversion if gps
        if convert_to_utm and msg_type =='sensor_msgs/NavSatFix':
            utm_data = utm.from_latlon(msg.latitude, msg.longitude)
            # converting 'letter' in utm to its unicode value as fix to \
            # scipy savemat's bug converting everything to char
            utm_data = utm_data[:-1] + (ord(utm_data[-1]),)
            res +=utm_data

        data_array.append(res)

    if data_array:        
        data_dict = {}
        for field_name, column in zip(field_names, np.array(data_array).T):
            data_dict[field_name] = column[:,None]

        return data_dict
    else:
        bglog.warn("Notfound! Topic: "+topic_name)
        return None

# get the file path for rospy_tutorials
rospack = rospkg.RosPack()

parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter,
    description='Convert ROSBAG to mat file.\n\n'
    'A simple script that can converts ros messages to matlab mat files.'
    '\nDefine required message type(s) in a dictionary file and '
	'specify list of topics to be converted in a config file.\n\n')

parser.add_argument('-i','--input_bagfile', required=True, help='Input a rosbag file')
parser.add_argument('-o','--output_dir', help='Output dir for mat file')
parser.add_argument('-c','--config_file', help='Yaml file specifying topic names to convert', default ='../config/test_config.yaml')
parser.add_argument('-d','--dictionary', help='Dictionary file which specifies how to read the topic', default ='../config/msg_dict.yaml')
parser.add_argument('-s','--subtract_start_time', default=False, action="store_true" , help="Boolean flag to specify whether to include offset_time obtained by subtracting bag start_time from all timestamps")
parser.add_argument('-iutm','--ignore_ll2utm', default=False, action="store_true" , help="Boolean flag to specify whether to ignore converting lat long msg to utm, defaults to False")

args = parser.parse_args()

with open(args.dictionary, 'r') as f:
    exp_dic = yaml.safe_load(f)

with open(args.config_file, 'r') as f:
    config = yaml.safe_load(f)

if 'namespace' in config:
    ns_prefixes = config['namespace'] 
else:
    ns_prefixes = ['']

subtract_start_time = args.subtract_start_time
convert_to_utm = not args.ignore_ll2utm

bag = rosbag.Bag(args.input_bagfile)

output_mat_name = (os.path.basename(args.input_bagfile)).replace('.bag','.mat')

if args.output_dir is None: 
    output_mat_path = os.path.dirname(os.path.realpath(args.input_bagfile))+'/'
else:
    output_mat_path = os.path.realpath(args.output_dir) +'/'

output_mat = output_mat_path + output_mat_name

if not os.path.exists(output_mat_path):
    os.makedirs(output_mat_path)
    bglog.warn("output_dir doesn't exists, creating required path "+output_mat)

if os.path.isfile(output_mat):
    bglog.warn("File Already Exists, over-writing - "+output_mat)
else:
    bglog.info("Writing to file - "+output_mat)

with open(output_mat,'wb',0) as ofile:
    
    start_time = bag.get_start_time()
    savemat(ofile, {'start_time': start_time })
    bag_topics = bag.get_type_and_topic_info().topics.keys()

    for ns_prefix in ns_prefixes:

        if any([topic.startswith('/'+ns_prefix) for topic in bag_topics]):
            ns_dict = {}
            for topic in config['topic_list']:
                if ns_prefix:
                    topic_name = '/'+ns_prefix+topic[0]
                else:
                    topic_name = topic[0]

                msg_type = topic[1]
                variable_name = topic[2]
                msg_dict = exp_dic[msg_type]
                
                data_dict = save_topic2dict(topic_name, msg_dict, bag, start_time, subtract_start_time, msg_type, convert_to_utm)
                
                if data_dict:
                    ns_dict[variable_name] = copy.deepcopy(data_dict)
            
            if ns_dict:
                if ns_prefix:
                    savemat(ofile, {ns_prefix: ns_dict})
                else:
                    savemat(ofile, {'robot': ns_dict})
                bglog.info("Wrote namespace: "+ns_prefix+" \n")
        else: 
            bglog.warn("Notfound! Namespace: "+ns_prefix+'\n')
 
bag.close()
